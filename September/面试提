12.如何防止SQL注入，XSS攻击和CSRF攻击

XSS跨站脚本攻击

XSS跨站脚本攻击指攻击者在网页中嵌入客户端脚本(例如JavaScript)，当用户浏览此网页时，脚本就会在用户的浏览器上执行，从而达到攻击者的目的，比如获取用户的Cookie，导航到恶意网站，携带木马等。

防止XSS跨站脚本攻击：
	原则： 不相信用户输入的数据

1、 将重要的cookie标记为http only, 这样的话javascript中的document.cookie语句就不能cookie了
2、 只允许我们用户输入我们期望的数据
3、 对数据进行HTML encode 处理	。< 转化为 &lt;、> 转化为 &gt;、& 转化为 &amp;、' 转化为 &#039;、" 转化为 &quot;、空格 转化为 &nbsp;
4、 过滤或移除特殊的HTML标签。
5、 过滤 javascript 事件的标签。例如“onlick” "onfocus" 很多浏览器都加入了安全机制来过滤XSS


CSRF 跨站请求伪造

CSRF（XSRF）尽管听起来很想XSS跨站脚本攻击，但是它于XSS完全不同。XSS是利用站点内的信任用户，而CSRF则是通过伪装来自受信任用户的请求来利用受信任的站点。与XSS相比，CSRF攻击不大流行和难以防范，所以比XSS更具危险性。


如何防止CSRF跨站请求伪造：

对于web站点，将持久化的授权方法（例如cookie或者HTTP授权）切换为瞬时的授权方法（在每个form中提供隐藏field）。

“双提交”cookie。此方法只工作于Ajax请求，但它能够作为无需改变大量form的全局修正方法。如果某个授权的cookie在form post之前正被JavaScript代码读取，那么限制跨域规则将被应用。什么叫限制跨域规则呢？限制跨域规则就是：如果服务器需要在Post请求体或者URL中包含授权cookie的请求，那么这个请求必须来自于受信任的域，因为其它域是不能从信任域读取cookie的。上面那个例子的受信任域就是银行网站的某个域，而Mallory发给Bob的链接不是受信任的域。

使用Post代替Get。Post方式不会在web服务器和代理服务器日志中留下数据尾巴，然而Get方式却会留下数据尾巴。

以上三点都是正对web站点的防御手段，第4点是从用户的角度的防御手段。通过在浏览其它站点前登出站点或者在浏览器会话结束后清理浏览器的cookie来防止CSRF攻击。

SQL注入

所谓SQL注入，就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。

如何防止SQL注入：

永远不要信任用户的输入。对用户的输入进行校验，可以通过正则表达式，或限制长度；对单引号和双”-“进行转换等。
永远不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取
永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接
不要把机密信息直接存放，加密或者hash掉密码和敏感的信息
应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装

PHP解决多进程读写一个文件的方法


.数据库表的引擎有哪几种？区别和场景

nginx和PHP的工作原理


同一个ip，10分钟能只能访问5次


排序算法


如何防止http包的数据篡改。比如说转账10块，http包被劫，改成100块了。

edis起什么作用？

apache和nginx的区别

.Innodb和My ISAM的区别


4.hash索引和b+tree索引的区别


怎么解决数据不同步？


 什么是锁？

  答：数据库是一个多用户使用的共享资源。当多个用户并发地存取数据时，在数据库中就会产生多个事务同时存取同一数据的情况。若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。

 

加锁是实现数据库并发控制的一个非常重要的技术。当事务在对某个数据对象进行操作前，先向系统发出请求，对其加锁。加锁后事务就对该数据对象有了一定的控制，在该事务释放锁之前，其他的事务不能对此数据对象进行更新操作。

基本锁类型：锁包括行级锁和表级锁

6. 什么叫视图？游标是什么？

答：视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，视图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。

  游标：是对查询出来的结果集作为一个单元来有效的处理。游标可以定在该单元中的特定行，从结果集的当前行检索一行或多行。可以对结果集当前行做修改。一般不使用游标，但是需要逐条处理数据的时候，游标显得十分重要。

7. 什么是存储过程？用什么来调用？

答：存储过程是一个预编译的SQL语句，优点是允许模块化的设计，就是说只需创建一次，以后在该程序中就可以调用多次。如果某次操作需要执行多次SQL，使用存储过程比单纯SQL语句执行要快。可以用一个命令对象来调用存储过程。

8. 索引的作用？和它的优点缺点是什么？

答：索引就一种特殊的查询表，数据库的搜索引擎可以利用它加速对数据的检索。它很类似与现实生活中书的目录，不需要查询整本书内容就可以找到想要的数据。索引可以是唯一的，创建索引允许指定单个列或者是多个列。缺点是它减慢了数据录入的速度，同时也增加了数据库的尺寸大小。

9. 如何通俗地理解三个范式？  

答：第一范式：1NF是对属性的原子性约束，要求属性具有原子性，不可再分解；

第二范式：2NF是对记录的惟一性约束，要求记录有惟一标识，即实体的惟一性；  第三范式：3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。。

10. 什么是基本表？什么是视图？  

答：基本表是本身独立存在的表，在 SQL 中一个关系就对应一个表。  视图是从一个或几个基本表导出的表。视图本身不独立存储在数据库中，是一个虚表  

 MySQL数据库作发布系统的存储，一天五万条以上的增量，预计运维三年,怎么优化？

a. 设计良好的数据库结构，允许部分数据冗余，尽量避免join查询，提高效率。

b. 选择合适的表字段数据类型和存储引擎，适当的添加索引。

c. mysql库主从读写分离。

d. 找规律分表，减少单表中的数据量提高查询速度。

e。添加缓存机制，比如memcached，apc等。

f. 不经常改动的页面，生成静态页面。

g. 书写高效率的SQL。比如 SELECT * FROM TABEL 改为 SELECT field_1, field_2, field_3 FROM TABLE.

21. 对于大流量的网站,您采用什么样的方法来解决各页面访问量统计问题？

答：a. 确认服务器是否能支撑当前访问量。

b. 优化数据库访问。

c. 禁止外部访问链接（盗链）, 比如图片盗链。

d. 控制文件下载。

e. 使用不同主机分流。

f. 使用浏览统计软件，了解访问量，有针对性的进行优化。


Linux下只知道文件所在目录和内容，如何查找文件?

	grep -rn tools/ -e "gaoy"    -r 递归 -n 显示行数 -w 完全匹配 


Linux查找一个文件 
	二进制的话  whereis
	查找命令的话 which
	其他文件的话  可以使用find（find其实都可以找） -name 指定搜索的名称活着匹配串， -maxdepth 指定搜索深度

	也可以使用locate命令查找，但是最新变动的文件可能找不到，因为该命令实际上是搜索数据库，该数据库每天自动更新，可以手动执行updatedb更新	

解释一下RESTful，平时是怎么用的	

	RESTful是无状态的，采用URL+HTTP请求方法来描述资源和行为。 
一般在前后端分离的项目中，后端会提供REST接口给前端，其HTTP请求方法一般为:

GET : 获取资源。

POST: 更新资源。

PUT: 创建资源。

DELETE: 删除资源。

其次，RESTful由于是无状态的，一般会采用JWT或OAuth的方式来认证一个用户，Token是保存在前端的，为了安全性一般会配合HTTPS使用。

9. MySQL平时是怎么分析效率和进行SQL优化的?

		较常使用的方法是explain SQL查看执行计划，根据查询计划可以知道是否使用了索引，是否进行来全表扫描以及查询的顺序，依此我们可以建立适当的索引和连接查询调优。 
还有一个是开启慢查询记录执行时间长的SQL语句。

通常会在WHERE、JOIN ON和ORDER BY使用到字段上加上索引。

避免查询时判断NULL，否则可能会导致全表扫描。

避免使用OR来连接查询条件，否则可能导致全表扫描，可以改用UNION或UNION ALL。

避免LIKE查询，否则可能导致全表扫描。

不使用SELECT *，只查询必须的字段，避免加载无用数据。

能用UNION ALL的时候就不用UNION，UNION过滤重复数据要耗费更多的cpu资源。

10、 Redis如果运行过程中崩溃了怎么办。

	Redis有提供数据持久化的功能，一种是快照，一种是AOF。 
快照是在某一个时间点将所有数据写入到磁盘中，AOF是将被执行的命令复制到硬盘中，快照的文件体积要比AOF的文件体积小。前者在恢复时速度比后者快，但是因为是间隔持久化，所以会有一定量的数据丢失。后者因为是实时写入的，所以数据的完整性比较好，如果丢失的话一般也就丢失一秒的数据。

其次需要做主从复制，这样一份数据可以保存在多台服务器上，且可以避免Redis崩溃到重启完成这段时间内无法提供正常服务，同时从服务器可以分担主服务器的读压力。